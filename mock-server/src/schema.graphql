scalar Date

type Query {
  "Get fashionNews array for homepage slider"
  fashionNews: [FashionNewsItem!]!
  "Get products array"
  products: [Product!]!
  "Get Orders"
  orders: [Order!]!
  "Get product"
  product(id: ID!): Product!
}

type Mutation {
  addOrder(
    consumer: String!
    phone: String!
    orderList: [InputOrderListItem!]!
  ): Order!
  login(username: String): AuthPayload
}

type Subscription {
  orderAdded: Order!
}

enum Size {
  S
  M
  L
  XL
  XXL
}

input InputOrderListItem {
  productId: ID!
  quantity: Int!
  size: Size!
}

type AuthPayload {
  token: String
  user: User
}

type OrderListItem {
  productId: ID!
  quantity: Int!
  size: Size!
}

type FashionNewsItem {
  id: ID!
  #title: String!
  img: String!
  #info: String
}

type Image {
  id: ID!
  url: String!
}

type Product {
  id: ID!
  name: String!
  price: String!
  #old_price: Float
  #new_price: Float
  description: String
  fullDescription: String
  #characteristics: [String]
  #reviews: [Revies]
  mainImage: String!
  imagesList: [Image!]!
  size: [Size!]!
  #created_at: Date!
}

type Order {
  id: ID!
  consumer: String!
  phone: String!
  confirmed: Boolean!
  received: Boolean!
  createdAt: Date!
  orderList: [OrderListItem!]!
}

enum Role {
  Seller
  Consumer
}

interface User {
  id: ID!
  username: String!
  role: Role!
}

type Seller implements User {
  id: ID!
  username: String!
  isActive: Boolean!
  role: Role!
}

type Consumer implements User {
  id: ID!
  username: String!
  role: Role!
}
