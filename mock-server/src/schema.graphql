scalar Date

type Query {
  fashionNews: [FashionNewsItem!]!
  products: [Product!]!
  orders: Order!
  product(id: ID!): Product
  bag(anonymousId: ID): Bag!
}

type Mutation {
  createOrder(
    username: String
    phone: String!
    totalPrice: String!
    orderItems: [InputOrderListItem!]!
  ): Order
  login(username: String): AuthPayload
  createOrFindBag(anonymousId: ID): Bag
  addItemToBag(
    productId: ID!
    anonymousId: ID
    quantity: Int!
    size: Size!
  ): BagItem
}

type Subscription {
  createdOrder: Order
}

enum Size {
  S
  M
  L
  XL
  XXL
}

type AuthPayload {
  token: String
  user: User
}

input InputOrderListItem {
  bagItemId: ID!
  quantity: Int!
  size: Size!
}

type BagItem {
  id: ID!
  product: Product!
  bagId: ID
  orderId: ID
  quantity: Int!
  size: Size!
}

type Bag {
  id: ID!
  userId: ID
  bagItems: [BagItem]
  anonymousId: ID
  expires: Date
  inSession: Boolean
}

type Order {
  id: ID!
  consumerName: String!
  user: Consumer
  phone: String!
  totalPrice: String!
  confirmed: Boolean!
  received: Boolean!
  createdAt: Date!
  orderItems: [BagItem]
}

type FashionNewsItem {
  id: ID!
  #title: String!
  img: String!
  #info: String
}

type Image {
  id: ID!
  url: String!
}

enum Gender {
  Male
  Female
}

type Category {
  id: ID!
  name: String!
}

type Product {
  id: ID!
  name: String!
  price: String!
  #old_price: Float
  #new_price: Float
  description: String
  fullDescription: String
  #characteristics: [String]
  #reviews: [Revies]
  mainImage: Image!
  imagesList: [Image!]!
  size: [Size!]!
  category: Category!
  gender: Gender!
  createdAt: Date!
}

enum Role {
  Seller
  Consumer
}

interface User {
  id: ID!
  username: String!
  role: Role!
  createdAt: Date!
}

type Seller implements User {
  id: ID!
  username: String!
  isActive: Boolean!
  role: Role!
  createdAt: Date!
}

type Consumer implements User {
  id: ID!
  username: String!
  role: Role!
  bag: Bag!
  phone: String
  createdAt: Date!
}
